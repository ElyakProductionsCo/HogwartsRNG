<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Loot Spin Game</title>
  <link href="https://fonts.googleapis.com/css2?family=Comfortaa&display=swap" rel="stylesheet">
  <style>
    body {
      font-family: 'Comfortaa', cursive;
      background: linear-gradient(to bottom, #1e1e2f, #0f0f1a);
      color: #ffffff;
      margin: 0;
      padding: 0;
      text-align: center;
    }

    .container {
      display: flex;
      justify-content: center;
      gap: 20px;
      margin: 40px auto;
      max-width: 900px;
      position: relative;
    }

    .ascension-shop {
      width: 250px;
      background: rgba(255, 255, 255, 0.05);
      padding: 20px;
      border-radius: 20px;
      box-shadow: 0 0 40px rgba(0, 0, 0, 0.6);
      text-align: center;
    }

    .ascension-shop h2 {
      font-size: 1.8em;
      margin-top: 0;
    }

    .forge-slots {
      display: flex;
      flex-direction: column;
      gap: 10px;
      margin-top: 20px;
    }

    .forge-slot {
      width: 100%;
      height: 60px;
      border: 2px dashed #888;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.9em;
      background: rgba(255,255,255,0.05);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      cursor: pointer;
    }

    .forge-slot:hover {
      transform: scale(1.02);
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }

    .forge-button {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 1em;
      background: #ff69b4;
      color: #fff;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      font-family: 'Comfortaa', cursive;
    }

    .forge-button:hover {
      background: #ff4d94;
    }

    .game-container {
      max-width: 600px;
      background: rgba(255, 255, 255, 0.05);
      padding: 30px;
      border-radius: 20px;
      box-shadow: 0 0 40px rgba(0, 0, 0, 0.6);
      position: relative;
      z-index: 1;
    }

    h1 {
      margin-top: 0;
      font-size: 2.5em;
    }

    .spin-button {
      padding: 15px 40px;
      font-size: 1.2em;
      font-weight: bold;
      background: #00c3ff;
      color: #fff;
      border: none;
      border-radius: 12px;
      cursor: pointer;
      box-shadow: 0 0 15px #00c3ff;
      transition: background 0.3s;
      font-family: 'Comfortaa', cursive;
    }

    .spin-button:hover {
      background: #00a3dd;
    }

    .item-card {
      margin-top: 30px;
      padding: 20px;
      border-radius: 15px;
      display: inline-block;
      font-size: 1.2em;
      font-weight: bold;
      box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
      transition: all 0.3s ease;
      width: 280px;
    }

    /* Rarity styles for item cards */
    .Common { 
      background: #bdc3c7; 
      color: #2c3e50; 
      box-shadow: 0 0 10px rgba(189, 195, 199, 0.7);
    }

    .Uncommon { 
      background: #2ecc71; 
      color: #fff; 
      box-shadow: 0 0 12px rgba(46, 204, 113, 0.7);
    }

    .Rare { 
      background: #3498db; 
      color: #fff; 
      box-shadow: 0 0 15px rgba(52, 152, 219, 0.7);
    }

    .SuperRare { 
      background: #e67e22; 
      color: #fff; 
      box-shadow: 0 0 15px rgba(230, 126, 34, 0.7);
    }

    .Epic { 
      background: #9b59b6; 
      color: #fff; 
      box-shadow: 0 0 15px rgba(155, 89, 182, 0.7);
    }

    .Legendary { 
      background: #f1c40f; 
      color: #000; 
      box-shadow: 0 0 20px rgba(241, 196, 15, 0.7);
    }

    .Mythical { 
      background: #ff69b4; 
      color: #fff; 
      box-shadow: 0 0 22px rgba(255, 105, 180, 0.7);
    }

    .Celestial { 
      background: #00f7ff; 
      color: #000; 
      box-shadow: 0 0 25px rgba(0, 247, 255, 0.8);
    }

    .Special { 
      background: #dc143c;
      color: #fff;
      box-shadow: 0 0 25px rgba(220, 20, 60, 0.8);
    }

    /* Inventory list item variants */
    .Common-li { background: rgba(189, 195, 199, 0.7); }
    .Uncommon-li { background: rgba(46, 204, 113, 0.7); }
    .Rare-li { background: rgba(52, 152, 219, 0.7); }
    .SuperRare-li { background: rgba(230, 126, 34, 0.7); }
    .Epic-li { background: rgba(155, 89, 182, 0.7); }
    .Legendary-li { background: rgba(241, 196, 15, 0.7); }
    .Mythical-li { background: rgba(255, 105, 180, 0.7); }
    .Celestial-li { background: rgba(0, 247, 255, 0.7); }
    .Special-li { background: rgba(220, 20, 60, 0.7); }

    .inventory {
      margin-top: 40px;
      text-align: left;
      background: rgba(255, 255, 255, 0.03);
      padding: 15px 20px;
      border-radius: 15px;
      max-height: 250px;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: #dc143c rgba(255, 255, 255, 0.1);
    }

    .inventory::-webkit-scrollbar {
      width: 8px;
    }

    .inventory::-webkit-scrollbar-track {
      background: rgba(255, 255, 255, 0.1);
      border-radius: 10px;
    }

    .inventory::-webkit-scrollbar-thumb {
      background: #dc143c;
      border-radius: 10px;
    }

    .inventory::-webkit-scrollbar-thumb:hover {
      background: #b01030;
    }

    .inventory h3 {
      border-bottom: 1px solid #444;
      padding-bottom: 10px;
    }

    .inventory ul {
      list-style-type: none;
      padding-left: 0;
      margin: 0;
    }

    .inventory li {
      padding: 8px;
      margin: 5px 0;
      border-radius: 8px;
      cursor: pointer;
      position: relative;
      transition: transform 0.2s ease, box-shadow 0.2s ease;
    }

    .inventory li:hover {
      transform: scale(1.02);
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }

    .inventory li.selected {
      border: 2px solid #00f7ff;
      box-shadow: 0 0 15px rgba(0, 247, 255, 0.8);
    }

    .inventory li.forged-card {
      animation: glow 1s ease-in-out;
    }

    .tooltip {
      visibility: hidden;
      background-color: rgba(0, 0, 0, 0.9);
      color: #fff;
      text-align: center;
      padding: 8px;
      border-radius: 6px;
      position: absolute;
      z-index: 100;
      bottom: 100%;
      left: 50%;
      transform: translateX(-50%);
      width: 200px;
      font-size: 0.9em;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    .inventory li:hover .tooltip {
      visibility: visible;
    }

    .slots {
      display: flex;
      justify-content: space-between;
      margin-top: 30px;
      flex-wrap: wrap;
      gap: 10px;
    }

    .slot {
      width: 100px;
      height: 100px;
      border: 2px dashed #888;
      border-radius: 10px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8em;
      background: rgba(255,255,255,0.05);
      transition: transform 0.2s ease, box-shadow 0.2s ease;
      text-align: center;
      overflow: hidden;
      position: relative;
      cursor: pointer;
    }

    .slot:hover {
      transform: scale(1.05);
      box-shadow: 0 0 10px rgba(255, 255, 255, 0.3);
    }

    .slot .slot-content {
      width: 100%;
      height: 100%;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      padding: 5px;
      box-sizing: border-box;
    }

    .slot .tooltip {
      bottom: auto;
      top: 100%;
    }

    .coin-counter {
      font-size: 1.3em;
      margin-bottom: 20px;
    }

    .coin-counter.sparkle {
      animation: sparkle 0.5s ease-in-out;
    }
    
    .description-text {
      font-size: 0.8em;
      margin-top: 5px;
      font-style: italic;
    }

    .confetti-container {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      overflow: hidden;
      pointer-events: none;
      z-index: 1000;
    }

    .confetti {
      position: absolute;
      width: 10px;
      height: 10px;
      pointer-events: none;
      z-index: 1000;
      border-radius: 2px;
    }

    .special-message {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 999;
    }

    .special-content {
      background: rgba(30, 30, 47, 0.9);
      padding: 30px;
      border-radius: 15px;
      text-align: center;
      max-width: 400px;
    }

    .special-title {
      font-size: 2em;
      margin-bottom: 10px;
    }

    .special-title.Celestial {
      color: #00f7ff;
      text-shadow: 0 0 10px rgba(0, 247, 255, 0.8);
    }

    .special-title.Special {
      color: #dc143c;
      text-shadow: 0 0 10px rgba(220, 20, 60, 0.8);
    }

    .special-item {
      font-size: 1.5em;
      font-weight: bold;
      margin: 10px 0;
    }

    .close-special {
      margin-top: 20px;
      padding: 10px 20px;
      font-size: 1em;
      background: #dc143c;
      color: #fff;
      border: none;
      border-radius: 10px;
      cursor: pointer;
      font-family: 'Comfortaa', cursive;
    }

    .close-special:hover {
      background: #b01030;
    }

    .code-redeemer {
      margin-top: 20px;
      display: flex;
      gap: 10px;
      background: rgba(255, 255, 255, 0.05);
      padding: 10px;
      border-radius: 10px;
    }

    .code-redeemer input {
      padding: 6px;
      font-size: 0.8em;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid #888;
      border-radius: 5px;
      color: #fff;
      font-family: 'Comfortaa', cursive;
      flex: 1;
      max-width: 120px;
    }

    .code-redeemer button {
      padding: 6px 12px;
      font-size: 0.8em;
      background: #00c3ff;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-family: 'Comfortaa', cursive;
    }

    .code-redeemer button:hover {
      background: #00a3dd;
    }

    .save-load {
      margin-top: 20px;
      display: flex;
      flex-direction: column;
      gap: 10px;
      background: rgba(255, 255, 255, 0.05);
      padding: 10px;
      border-radius: 10px;
    }

    .save-load textarea {
      padding: 6px;
      font-size: 0.8em;
      background: rgba(255, 255, 255, 0.1);
      border: 1px solid #888;
      border-radius: 5px;
      color: #fff;
      font-family: 'Comfortaa', cursive;
      width: 100%;
      resize: none;
      height: 60px;
    }

    .save-load button {
      padding: 6px 12px;
      font-size: 0.8em;
      background: #00c3ff;
      color: #fff;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-family: 'Comfortaa', cursive;
    }

    .save-load button:hover {
      background: #00a3dd;
    }

    @keyframes glow {
      0% { box-shadow: 0 0 5px rgba(255, 255, 255, 0.5); }
      50% { box-shadow: 0 0 20px rgba(255, 255, 0, 1); }
      100% { box-shadow: 0 0 5px rgba(255, 255, 255, 0.5); }
    }

    @keyframes sparkle {
      0% { transform: scale(1); opacity: 1; }
      50% { transform: scale(1.1); opacity: 0.7; }
      100% { transform: scale(1); opacity: 1; }
    }
  </style>
</head>
<body>
  <div class="confetti-container" id="confettiContainer"></div>
  <div class="container">
    <div class="ascension-shop">
      <h2>🔮 Ascension Shop</h2>
      <div class="forge-slots" id="forgeSlots">
        <div class="forge-slot" data-slot="0">Forge Slot 1</div>
        <div class="forge-slot" data-slot="1">Forge Slot 2</div>
        <div class="forge-slot" data-slot="2">Forge Slot 3</div>
      </div>
      <button class="forge-button" onclick="forgeCards()">Forge Cards</button>
      <div class="code-redeemer">
        <input type="text" id="codeInput" placeholder="Enter code">
        <button onclick="redeemCode()">Redeem</button>
      </div>
      <div class="save-load">
        <textarea id="saveCode" placeholder="Save/load code here"></textarea>
        <div style="display: flex; gap: 10px;">
          <button onclick="saveGame(true)">Save Game</button>
          <button onclick="loadGame()">Load Game</button>
        </div>
      </div>
    </div>
    <div class="game-container">
      <h1>🎰 Loot Spin</h1>
      <div class="coin-counter">💰 Coins: <span id="coinCounter">100</span></div>
      <button class="spin-button" onclick="spin()">Spin (Cost: <span id="spinCost">10</span> Coins)</button>
      <div id="result" class="item-card"></div>

      <div class="slots" id="slots">
        <div class="slot" data-slot="0"><div class="slot-content">Slot 1</div></div>
        <div class="slot" data-slot="1"><div class="slot-content">Slot 2</div></div>
        <div class="slot" data-slot="2"><div class="slot-content">Slot 3</div></div>
        <div class="slot" data-slot="3"><div class="slot-content">Slot 4</div></div>
        <div class="slot" data-slot="4"><div class="slot-content">Slot 5</div></div>
      </div>

      <div class="inventory">
        <h3>🎒 Inventory:</h3>
        <ul id="inventoryList"></ul>
      </div>
    </div>
  </div>

  <script>
    let coins = 100;
    let spinCost = 10;
    const inventory = [];
    const equipped = [null, null, null, null, null];
    const forgeSlots = [null, null, null];
    let selectedItem = null;
    const redeemedCodes = new Set();
    const rarityOrder = { 
      Special: 9, 
      Celestial: 8, 
      Mythical: 7, 
      Legendary: 6, 
      Epic: 5, 
      SuperRare: 4, 
      Rare: 3, 
      Uncommon: 2, 
      Common: 1 
    };
    const rarityProgression = [
      'Common', 'Uncommon', 'Rare', 'SuperRare', 
      'Epic', 'Legendary', 'Mythical', 'Celestial'
    ];

    const items = [
      // Common Items (40% total chance, 12 items)
      { name: "Chocolate Frog", rarity: "Common", emoji: "🐸", cps: 1, chance: 0.05, description: "A sweet that hops around, comes with a wizard card." },
      { name: "Bertie Bott's Beans", rarity: "Common", emoji: "🍬", cps: 1, chance: 0.05, description: "Jelly beans with flavors like earwax or chocolate." },
      { name: "Hogwarts Letter", rarity: "Common", emoji: "✉️", cps: 2, chance: 0.04, description: "Your acceptance letter to Hogwarts!" },
      { name: "Broken Wand", rarity: "Common", emoji: "🪄", cps: 1, chance: 0.04, description: "Sparks occasionally, but unreliable." },
      { name: "Old Cauldron", rarity: "Common", emoji: "⚗️", cps: 2, chance: 0.04, description: "Dented but functional for basic potions." },
      { name: "Potion Book", rarity: "Common", emoji: "📖", cps: 1, chance: 0.03, description: "Contains recipes for simple potions." },
      { name: "Scabbers", rarity: "Common", emoji: "🐀", cps: 1, chance: 0.03, description: "Ron's suspicious pet rat." },
      { name: "Quill", rarity: "Common", emoji: "✍️", cps: 1, chance: 0.03, description: "A standard feather quill for spell writing." },
      { name: "Parchment", rarity: "Common", emoji: "📜", cps: 1, chance: 0.03, description: "Used for homework and spell notes." },
      { name: "Hogwarts Textbook", rarity: "Common", emoji: "📚", cps: 2, chance: 0.02, description: "A basic spellbook or history text." },
      { name: "Pumpkin Pasty", rarity: "Common", emoji: "🥟", cps: 1, chance: 0.02, description: "A savory snack from the Hogwarts Express." },
      { name: "Sneakoscope", rarity: "Common", emoji: "🔍", cps: 1, chance: 0.02, description: "Spins when someone untrustworthy is near." },

      // Uncommon Items (25% total chance, 10 items)
      { name: "Marauder's Map", rarity: "Uncommon", emoji: "🗺️", cps: 3, chance: 0.04, description: "Shows everyone's location at Hogwarts." },
      { name: "Extendable Ears", rarity: "Uncommon", emoji: "👂", cps: 3, chance: 0.04, description: "Eavesdrop through walls with these." },
      { name: "Fizzing Whizbees", rarity: "Uncommon", emoji: "🍯", cps: 2, chance: 0.03, description: "Sweets that make you levitate slightly." },
      { name: "Nimbus 2000", rarity: "Uncommon", emoji: "🧹", cps: 4, chance: 0.03, description: "A decent Quidditch broom." },
      { name: "Remembrall", rarity: "Uncommon", emoji: "🔮", cps: 2, chance: 0.03, description: "Glows red when you forget something." },
      { name: "Quick-Quotes Quill", rarity: "Uncommon", emoji: "✍️", cps: 3, chance: 0.02, description: "Writes exaggerated stories automatically." },
      { name: "Hogsmeade Permission", rarity: "Uncommon", emoji: "📝", cps: 2, chance: 0.02, description: "Grants access to Hogsmeade weekends." },
      { name: "Butterbeer", rarity: "Uncommon", emoji: "🍺", cps: 2, chance: 0.02, description: "A frothy, non-alcoholic drink." },
      { name: "Gobstones", rarity: "Uncommon", emoji: "🎲", cps: 2, chance: 0.01, description: "A game that squirts losers with goo." },
      { name: "Spellotape", rarity: "Uncommon", emoji: "🩹", cps: 2, chance: 0.01, description: "Magical tape for fixing wands." },

      // Rare Items (15% total chance, 8 items)
      { name: "Invisibility Cloak", rarity: "Rare", emoji: "🧥", cps: 5, chance: 0.03, description: "Hides you from most eyes." },
      { name: "Time-Turner", rarity: "Rare", emoji: "⏳", cps: 6, chance: 0.025, description: "Travel back in time, use cautiously." },
      { name: "Howler", rarity: "Rare", emoji: "🔴", cps: 4, chance: 0.02, description: "Screams its message at the recipient." },
      { name: "Firebolt", rarity: "Rare", emoji: "🧹", cps: 7, chance: 0.02, description: "The fastest Quidditch broom ever." },
      { name: "Deluminator", rarity: "Rare", emoji: "💡", cps: 5, chance: 0.015, description: "Steals and stores light." },
      { name: "Polyjuice Potion", rarity: "Rare", emoji: "🧪", cps: 6, chance: 0.015, description: "Transform into someone else for an hour." },
      { name: "Sneakoscope", rarity: "Rare", emoji: "🔍", cps: 4, chance: 0.01, description: "A more reliable dark detector." },
      { name: "Mandrake", rarity: "Rare", emoji: "🌱", cps: 5, chance: 0.01, description: "Its cry is fatal, handle with care." },

      // Super Rare Items (10% total chance, 6 items)
      { name: "Felix Felicis", rarity: "SuperRare", emoji: "🍀", cps: 10, chance: 0.025, description: "Liquid luck for a perfect day." },
      { name: "Triwizard Cup", rarity: "SuperRare", emoji: "🏆", cps: 12, chance: 0.02, description: "Glows with tournament magic." },
      { name: "Thestral", rarity: "SuperRare", emoji: "🐎", cps: 11, chance: 0.02, description: "Only visible to those who’ve seen death." },
      { name: "Pensieve", rarity: "SuperRare", emoji: "🪣", cps: 10, chance: 0.015, description: "View and analyze memories." },
      { name: "Mirror of Erised", rarity: "SuperRare", emoji: "🪞", cps: 9, chance: 0.01, description: "Shows your heart’s deepest desire." },
      { name: "Mad-Eye’s Eye", rarity: "SuperRare", emoji: "👁️", cps: 10, chance: 0.01, description: "Sees through walls and cloaks." },

      // Epic Items (5% total chance, 5 items)
      { name: "Phoenix Feather", rarity: "Epic", emoji: "🔥", cps: 15, chance: 0.015, description: "Bursts with regenerative magic." },
      { name: "Goblet of Fire", rarity: "Epic", emoji: "🔥", cps: 16, chance: 0.012, description: "Chooses worthy champions." },
      { name: "Veil", rarity: "Epic", emoji: "🚪", cps: 14, chance: 0.01, description: "A mysterious archway to the beyond." },
      { name: "Room of Requirement", rarity: "Epic", emoji: "🏰", cps: 15, chance: 0.008, description: "Appears when you need it most." },
      { name: "Patronus Charm", rarity: "Epic", emoji: "🦌", cps: 13, chance: 0.005, description: "Summons a protective spirit." },

      // Legendary Items (3% total chance, 4 items)
      { name: "Elder Wand", rarity: "Legendary", emoji: "🌟", cps: 20, chance: 0.01, description: "The most powerful wand in existence." },
      { name: "Resurrection Stone", rarity: "Legendary", emoji: "🪙", cps: 18, chance: 0.008, description: "Summons shadows of the dead." },
      { name: "Cloak of Invisibility", rarity: "Legendary", emoji: "🕴️", cps: 22, chance: 0.007, description: "True invisibility, a Deathly Hallow." },
      { name: "Sword of Gryffindor", rarity: "Legendary", emoji: "⚔️", cps: 25, chance: 0.005, description: "Appears to worthy Gryffindors." },

      // Mythical Items (1.5% total chance, 3 items)
      { name: "Horcrux", rarity: "Mythical", emoji: "💍", cps: 30, chance: 0.006, description: "A dark object containing a soul fragment." },
      { name: "Philosopher’s Stone", rarity: "Mythical", emoji: "🪨", cps: 35, chance: 0.005, description: "Grants immortality and gold." },
      { name: "Fawkes", rarity: "Mythical", emoji: "🦅", cps: 32, chance: 0.004, description: "Dumbledore’s loyal phoenix." },

      // Celestial Items (0.5% total chance, 2 items)
      { name: "Deathly Hallows", rarity: "Celestial", emoji: "🔺", cps: 50, chance: 0.003, description: "Mastery over death itself." },
      { name: "Hogwarts Castle", rarity: "Celestial", emoji: "🏰", cps: 60, chance: 0.002, description: "The magical heart of the wizarding world." },

      // Special Items (0.4% total chance, 5 items)
      { name: "Harry’s Scar", rarity: "Special", emoji: "⚡️", cps: 70, chance: 0.0015, description: "A mark of survival and connection to Voldemort." },
      { name: "Dumbledore’s Army", rarity: "Special", emoji: "🪖", cps: 65, chance: 0.001, description: "A rebellious group of brave students." },
      { name: "Snitch", rarity: "Special", emoji: "🏐", cps: 60, chance: 0.001, description: "The elusive prize of Quidditch." },
      { name: "Sorting Hat", rarity: "Special", emoji: "🎩", cps: 75, chance: 0.0005, description: "Chooses your Hogwarts house with wisdom." },
      { name: "Professor McGonagall", rarity: "Special", emoji: "🧙‍♀️", cps: 50, chance: 0, description: "A strict but fair Transfiguration teacher." }
    ];

    function generateChecksum(state) {
      const coinSum = state.coins || 0;
      const spinCostSum = state.spinCost || 0;
      const inventoryCount = state.inventory ? state.inventory.length : 0;
      const equippedCount = state.equipped ? state.equipped.filter(item => item !== null).length : 0;
      const forgeCount = state.forgeSlots ? state.forgeSlots.filter(item => item !== null).length : 0;
      return (coinSum + spinCostSum + inventoryCount + equippedCount + forgeCount) % 1000;
    }

    function validateState(state) {
      if (!state || typeof state !== 'object') return false;

      // Validate coins and spinCost
      if (typeof state.coins !== 'number' || state.coins < 0 || state.coins > 1e9) return false;
      if (typeof state.spinCost !== 'number' || state.spinCost < 10 || state.spinCost > 1e6) return false;

      // Validate inventory
      if (!Array.isArray(state.inventory)) return false;
      for (let item of state.inventory) {
        if (!item || !items.some(base => 
          base.name === item.name && 
          base.rarity === item.rarity && 
          base.cps === item.cps && 
          base.emoji === item.emoji && 
          base.description === item.description
        )) {
          // Allow forged items with higher CPS
          if (!state.inventory.some(forged => 
            forged.name === item.name && 
            rarityProgression.indexOf(item.rarity) > rarityProgression.indexOf(forged.rarity) && 
            item.cps >= forged.cps
          )) return false;
        }
      }

      // Validate equipped
      if (!Array.isArray(state.equipped) || state.equipped.length !== 5) return false;
      for (let item of state.equipped) {
        if (item && !items.some(base => 
          base.name === item.name && 
          base.rarity === item.rarity && 
          base.cps === item.cps && 
          base.emoji === item.emoji && 
          base.description === item.description
        )) {
          if (!state.inventory.some(forged => 
            forged.name === item.name && 
            rarityProgression.indexOf(item.rarity) > rarityProgression.indexOf(forged.rarity) && 
            item.cps >= forged.cps
          )) return false;
        }
      }

      // Validate forgeSlots
      if (!Array.isArray(state.forgeSlots) || state.forgeSlots.length !== 3) return false;
      for (let item of state.forgeSlots) {
        if (item && !items.some(base => 
          base.name === item.name && 
          base.rarity === item.rarity && 
          base.cps === item.cps && 
          base.emoji === item.emoji && 
          base.description === item.description
        )) {
          if (!state.inventory.some(forged => 
            forged.name === item.name && 
            rarityProgression.indexOf(item.rarity) > rarityProgression.indexOf(forged.rarity) && 
            item.cps >= forged.cps
          )) return false;
        }
      }

      // Validate redeemedCodes
      if (!Array.isArray(state.redeemedCodes)) return false;
      const validCodes = ['a2V5YnVnMDI=', 'Y29kZVByb01j'];
      for (let code of state.redeemedCodes) {
        if (!validCodes.includes(code)) return false;
      }

      return true;
    }

    function saveGame(showCode = false) {
      try {
        const state = {
          coins,
          spinCost,
          inventory,
          equipped,
          forgeSlots,
          redeemedCodes: Array.from(redeemedCodes)
        };
        const checksum = generateChecksum(state);
        const json = JSON.stringify(state);
        const encoded = btoa(encodeURIComponent(json)) + '.' + checksum;
        localStorage.setItem('lootSpinState', encoded);
        if (showCode) {
          const saveCodeEl = document.getElementById('saveCode');
          saveCodeEl.value = encoded;
          alert('Game saved! Copy the code from the textarea for backup.');
        }
      } catch (e) {
        alert('Failed to save game: ' + e.message);
      }
    }

    function loadGame() {
      const saveCodeEl = document.getElementById('saveCode');
      let encoded = saveCodeEl.value.trim();
      if (!encoded) {
        encoded = localStorage.getItem('lootSpinState') || '';
      }
      if (!encoded) {
        alert('No save code provided or saved game found!');
        return;
      }

      try {
        const [data, checksum] = encoded.split('.');
        const json = decodeURIComponent(atob(data));
        const state = JSON.parse(json);
        const expectedChecksum = generateChecksum(state);

        if (parseInt(checksum) !== expectedChecksum) {
          alert('Invalid save code: Checksum mismatch!');
          return;
        }

        if (!validateState(state)) {
          alert('Invalid save code: Data is corrupted or tampered!');
          return;
        }

        coins = state.coins;
        spinCost = state.spinCost;
        inventory.length = 0;
        inventory.push(...state.inventory);
        equipped.length = 0;
        equipped.push(...state.equipped);
        forgeSlots.length = 0;
        forgeSlots.push(...state.forgeSlots);
        redeemedCodes.clear();
        state.redeemedCodes.forEach(code => redeemedCodes.add(code));

        updateInventory();
        updateSpinButton();
        updateForgeSlots();
        updateSlots();
        saveCodeEl.value = '';
        alert('Game loaded successfully!');
      } catch (e) {
        alert('Failed to load game: Invalid save code!');
      }
    }

    // Load game on page load
    window.onload = () => {
      loadGame();
    };

    function spin() {
      if (coins < spinCost) {
        alert("Not enough coins!");
        return;
      }
      coins -= spinCost;
      spinCost += 10;
      updateSpinButton();
      
      const totalChance = items.reduce((sum, item) => sum + item.chance, 0);
      let roll = Math.random() * totalChance;
      let cumulative = 0;
      let selectedItem = null;
      
      for (let item of items) {
        cumulative += item.chance;
        if (roll < cumulative) {
          selectedItem = { ...item };
          break;
        }
      }
      
      if (selectedItem) {
        inventory.push(selectedItem);
        showResult(selectedItem);
        updateInventory();
        
        if (selectedItem.rarity === "Celestial" || selectedItem.rarity === "Special") {
          showSpecialMessage(selectedItem);
        }
      }
      saveGame();
    }

    function showSpecialMessage(item) {
      const specialDiv = document.createElement('div');
      specialDiv.className = 'special-message';
      
      specialDiv.innerHTML = `
        <div class="special-content">
          <div class="special-title ${item.rarity}">✨ ${item.rarity.toUpperCase()} ITEM! ✨</div>
          <div class="special-item">${item.name} ${item.emoji}</div>
          <div>${item.description}</div>
          <div class="description-text">Generates ${item.cps} coins/sec!</div>
          <button class="close-special" onclick="this.parentElement.parentElement.remove()">
            CELEBRATE!
          </button>
        </div>
      `;
      
      document.body.appendChild(specialDiv);
      createConfetti(item.rarity);
    }

    function createConfetti(rarity) {
      const colorMap = {
        Celestial: ['#00f7ff', '#00c3ff', '#ffffff'],
        Special: ['#dc143c', '#ff4500', '#ffd700']
      };
      const colors = colorMap[rarity] || ['#ff0000', '#ff4500', '#ffd700', '#ffffff'];
      const confettiContainer = document.getElementById('confettiContainer');
      
      for (let i = 0; i < 150; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.backgroundColor = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.left = Math.random() * 100 + 'vw';
        confetti.style.top = -10 + 'px';
        confetti.style.transform = `rotate(${Math.random() * 360}deg)`;
        
        const size = Math.random() * 10 + 5;
        confetti.style.width = size + 'px';
        confetti.style.height = size + 'px';
        
        confettiContainer.appendChild(confetti);
        
        const animationDuration = Math.random() * 3 + 2;
        
        confetti.animate([
          { top: '-10px', opacity: 1, transform: `rotate(${Math.random() * 360}deg)` },
          { top: '100vh', opacity: 0, transform: `rotate(${Math.random() * 360}deg)` }
        ], {
          duration: animationDuration * 1000,
          easing: 'cubic-bezier(0.1, 0.8, 0.9, 1)'
        });
        
        setTimeout(() => confetti.remove(), animationDuration * 1000);
      }
    }

    function showResult(item) {
      const resultDiv = document.getElementById("result");
      resultDiv.innerHTML = `
        <div>🎉 You won: ${item.name} ${item.emoji}</div>
        <div class="description-text">Description: ${item.description}</div>
        <div class="description-text">Generates ${item.cps} coins/sec</div>
      `;
      resultDiv.className = `item-card ${item.rarity}`;
    }

    function updateInventory(forgedCardName = null) {
      const list = document.getElementById("inventoryList");
      list.innerHTML = "";
      const sorted = [...inventory].sort((a, b) => {
        if (b.cps !== a.cps) return b.cps - a.cps;
        if (rarityOrder[b.rarity] !== rarityOrder[a.rarity]) return rarityOrder[b.rarity] - rarityOrder[a.rarity];
        return a.name.localeCompare(b.name);
      });
      sorted.forEach((item, i) => {
        const li = document.createElement("li");
        li.innerHTML = `
          ${item.name} ${item.emoji} (${item.rarity})
          <div class="description-text">${item.cps} coins/sec</div>
          <span class="tooltip">${item.description}</span>
        `;
        li.className = `${item.rarity}-li`;
        if (forgedCardName && item.name === forgedCardName) {
          li.classList.add('forged-card');
          setTimeout(() => li.classList.remove('forged-card'), 1000);
        }
        li.dataset.index = inventory.indexOf(item);
        li.addEventListener('click', () => selectItem(item, li));
        if (selectedItem && selectedItem === item) {
          li.classList.add('selected');
        }
        list.appendChild(li);
      });
    }

    function selectItem(item, element) {
      if (selectedItem === item) {
        selectedItem = null;
      } else {
        selectedItem = item;
      }
      updateInventory();
    }

    function placeItemInSlot(slotIndex) {
      if (!selectedItem) {
        alert("Please select an item first!");
        return;
      }
      if (equipped[slotIndex]) {
        inventory.push(equipped[slotIndex]);
      }
      equipped[slotIndex] = selectedItem;
      const itemIndex = inventory.indexOf(selectedItem);
      if (itemIndex !== -1) {
        inventory.splice(itemIndex, 1);
      }
      selectedItem = null;
      updateInventory();
      updateSlots();
      saveGame();
    }

    function placeItemInForgeSlot(slotIndex) {
      if (!selectedItem) {
        alert("Please select an item first!");
        return;
      }
      if (forgeSlots[slotIndex]) {
        inventory.push(forgeSlots[slotIndex]);
      }
      forgeSlots[slotIndex] = selectedItem;
      const itemIndex = inventory.indexOf(selectedItem);
      if (itemIndex !== -1) {
        inventory.splice(itemIndex, 1);
      }
      selectedItem = null;
      updateInventory();
      updateForgeSlots();
      saveGame();
    }

    function removeFromForgeSlot(slotIndex) {
      if (forgeSlots[slotIndex]) {
        inventory.push(forgeSlots[slotIndex]);
        forgeSlots[slotIndex] = null;
        updateInventory();
        updateForgeSlots();
        saveGame();
      }
    }

    function removeFromEquippedSlot(slotIndex) {
      if (equipped[slotIndex]) {
        inventory.push(equipped[slotIndex]);
        equipped[slotIndex] = null;
        updateInventory();
        updateSlots();
        saveGame();
      }
    }

    function forgeCards() {
      if (forgeSlots.some(slot => !slot)) {
        alert("Please fill all forge slots!");
        return;
      }

      const cardName = forgeSlots[0].name;
      if (forgeSlots.some(slot => slot.name !== cardName || slot.rarity === "Special")) {
        alert("All cards must be identical and not Special rarity!");
        return;
      }

      const currentRarity = forgeSlots[0].rarity;
      const currentRarityIndex = rarityProgression.indexOf(currentRarity);
      if (currentRarityIndex === -1 || currentRarityIndex >= rarityProgression.length - 1) {
        alert("Cannot forge this rarity!");
        return;
      }

      const newRarity = rarityProgression[currentRarityIndex + 1];
      const newCard = {
        ...forgeSlots[0],
        rarity: newRarity,
        cps: forgeSlots[0].cps * 4
      };

      inventory.push(newCard);
      forgeSlots.fill(null);
      updateForgeSlots();
      updateInventory(newCard.name);
      saveGame();
    }

    function updateForgeSlots() {
      const forgeSlotEls = document.querySelectorAll(".forge-slot");
      forgeSlotEls.forEach((slot, i) => {
        if (forgeSlots[i]) {
          slot.innerHTML = `
            ${forgeSlots[i].name} ${forgeSlots[i].emoji}
            <div class="description-text">${forgeSlots[i].cps}/sec</div>
            <span class="tooltip">${forgeSlots[i].description}</span>
          `;
          slot.style.background = getRarityColor(forgeSlots[i].rarity, 0.3);
          slot.onclick = () => removeFromForgeSlot(i);
        } else {
          slot.innerHTML = `Forge Slot ${i + 1}`;
          slot.style.background = "rgba(255,255,255,0.05)";
          slot.onclick = () => placeItemInForgeSlot(i);
        }
      });
    }

    function updateSlots() {
      const slotEls = document.querySelectorAll(".slot");
      equipped.forEach((item, i) => {
        if (i < slotEls.length) {
          const slotContent = slotEls[i].querySelector('.slot-content');
          if (slotContent) {
            if (item) {
              slotContent.innerHTML = `
                ${item.name} ${item.emoji}
                <div class="description-text">${item.cps}/sec</div>
                <span class="tooltip">${item.description}</span>
              `;
              slotEls[i].style.background = getRarityColor(item.rarity, 0.3);
              slotEls[i].onclick = () => removeFromEquippedSlot(i);
            } else {
              slotContent.innerHTML = `Slot ${i + 1}`;
              slotEls[i].style.background = "rgba(255,255,255,0.05)";
              slotEls[i].onclick = () => placeItemInSlot(i);
            }
          }
        }
      });
    }

    function getRarityColor(rarity, opacity) {
      const colors = {
        Common: "189, 195, 199",
        Uncommon: "46, 204, 113",
        Rare: "52, 152, 219",
        SuperRare: "230, 126, 34",
        Epic: "155, 89, 182",
        Legendary: "241, 196, 15",
        Mythical: "255, 105, 180",
        Celestial: "0, 247, 255",
        Special: "220, 20, 60"
      };
      return `rgba(${colors[rarity]}, ${opacity})`;
    }

    function updateSpinButton() {
      document.querySelector('.spin-button').innerHTML = `Spin (Cost: <span id="spinCost">${spinCost}</span> Coins)`;
      document.getElementById("coinCounter").textContent = coins;
    }

    function redeemCode() {
      const codeInput = document.getElementById('codeInput');
      const inputCode = codeInput.value.trim();
      const validCodes = {
        'a2V5YnVnMDI=': 'debug',
        'Y29kZVByb01j': 'mcgonagall'
      };
      let decodedCode = '';
      try {
        decodedCode = atob(inputCode);
      } catch (e) {
        decodedCode = inputCode;
      }
      const codeAction = validCodes[btoa(inputCode)] || validCodes[inputCode];

      if (codeAction === 'debug') {
        console.log('Debug Mode: Current Game State');
        console.log('Inventory:', inventory);
        console.log('Equipped:', equipped);
        console.log('Forge Slots:', forgeSlots);
        alert('Debug mode activated (check console).');
      } else if (codeAction === 'mcgonagall') {
        if (redeemedCodes.has(inputCode)) {
          alert('This code has already been redeemed!');
          return;
        }
        const mcgonagall = items.find(item => item.name === 'Professor McGonagall');
        inventory.push({ ...mcgonagall });
        redeemedCodes.add(inputCode);
        updateInventory();
        showSpecialMessage(mcgonagall);
        alert('Code redeemed! Professor McGonagall added to inventory.');
        saveGame();
      } else {
        alert('Invalid code!');
      }
      codeInput.value = '';
    }

    setInterval(() => {
      let totalCPS = 0;
      equipped.forEach(item => {
        if (item) {
          coins += item.cps;
          totalCPS += item.cps;
        }
      });
      if (totalCPS > 0) {
        const coinCounter = document.querySelector('.coin-counter');
        coinCounter.classList.add('sparkle');
        setTimeout(() => coinCounter.classList.remove('sparkle'), 500);
      }
      updateSpinButton();
      saveGame();
    }, 1000);

    updateInventory();
    updateSpinButton();
    updateForgeSlots();
    updateSlots();
  </script>
</body>
</html>
